# -*- coding: utf-8 -*-
"""eda_and_visualization.ipynb

Automatically generated by Colab.


# Commented out IPython magic to ensure Python compatibility.
# %cd /content/
!git clone https://github.com/p-p-p-p/precision_agriculture.git

# Get all processed data
csv_list=[]
for csv_file in os.listdir("/content/precision_agriculture/data/processed"):
    if csv_file.endswith(".csv"):
        csv_list.append(f"/content/precision_agriculture/data/processed/{csv_file}")

import pandas as pd
sample_df=pd.read_csv(csv_list[0])
sample_df.head()

#@title Dataset Summary
import pandas as pd
import os
from collections import defaultdict

vegetable_names = []
locations = []
file_stats = []
location_vegetables = defaultdict(list)

for csv_file in csv_list:
    df = pd.read_csv(csv_file)
    base_name = os.path.basename(csv_file)

    # Extract vegetable and location
    vegetable_name = location = "Unknown"
    if "_" in base_name:
        try:
            vegetable_name = base_name.split("_")[-2]
            location = base_name.split("_")[-1].replace(".csv", "")
        except ValueError:
            pass

    vegetable_names.append(vegetable_name)
    locations.append(location)

    # Group vegetables by location
    location_vegetables[location].append(vegetable_name)

    file_stats.append({
        "filename": base_name,
        "vegetable": vegetable_name,
        "location": location,
        "rows": len(df),
        "wavelength_range": f"{df['wavelength'].min()}‚Äì{df['wavelength'].max()}"
    })

# Convert to DataFrame for overview
overview_df = pd.DataFrame(file_stats)

# Print summary
print("‚úÖ Total CSV files:", len(csv_list))
print("ü•¶ Unique vegetables:", sorted(set(vegetable_names)))
print("üìç Unique locations:", sorted(set(locations)))

# Crops per location
print("\nüìä Vegetables available at each location:")
for loc, crops in location_vegetables.items():
    print(f"  {loc} ({len(crops)} crops): {', '.join(sorted(crops))}")

# Detailed summary table
print("\nüìÑ Detailed file summary:")
display(overview_df)

#@title Plot Reflectance vs Wavelength for All CSV Files

import matplotlib.pyplot as plt
import pandas as pd
import os


def plot_smoothed_reflectance(csv_file):
    # Load the CSV file
    df = pd.read_csv(csv_file)

    # Get the base filename
    base_name = os.path.basename(csv_file)

    # Extract vegetable and location info
    vegetable_name = location = "Unknown"
    if "_" in base_name:
        try:
            vegetable_name=base_name.split("_")[-2]
            location = base_name.split("_")[-1].replace(".csv", "")
        except ValueError:
            pass

    # Plot using smoothed reflectance
    plt.figure(figsize=(10, 5))
    plt.plot(df['wavelength'], df['reflectance'], linestyle='-', color='#247ab6', label='Reflectance')

    # Add annotation (top-right corner)
    plt.text(
        0.95, 0.95,
        f"Vegetable: {vegetable_name}\nLocation: {location}",
        transform=plt.gca().transAxes,
        fontsize=10,
        verticalalignment='top',
        horizontalalignment='right',
        bbox=dict(facecolor='white', alpha=0.6, edgecolor='gray')
    )

    # Labels and title
    plt.xlabel('Wavelength (nm)')
    plt.ylabel('Reflectance')
    plt.title(f'Reflectance VS Wavelength: {base_name}')
    plt.legend()
    plt.grid()
    plt.show()


# Loop over all files and plot
for file in csv_list:
    plot_smoothed_reflectance(file)

#@title Compare Reflectance for Vegetables in a Specific Location


import os
import pandas as pd
import matplotlib.pyplot as plt

# Initialize a dictionary to store file paths grouped by location
df_dict = {}

# Loop through the CSV files and organize them by location and vegetable
for csv_file in csv_list:
    base_name = os.path.basename(csv_file)

    # Remove the 'spectral_signature_' prefix from the base name if it exists
    if base_name.startswith("spectral_signature_"):
        base_name = base_name.replace("spectral_signature_", "")

    # Check if the file name follows the expected format (vegetable_location.csv)
    if "_" in base_name:
        try:
            vegetable_name, location = base_name.split("_")
            location = location.replace(".csv", "")

            # Add the file to the dictionary under the appropriate location
            if location not in df_dict:
                df_dict[location] = {}

            df_dict[location][vegetable_name] = csv_file
        except ValueError:
            print(f"Skipping: {base_name} ‚Äî doesn't match expected format.")

# Plot for each location
for location, veg_dict in df_dict.items():
    plt.figure(figsize=(12, 6))

    for idx, (vegetable, path) in enumerate(veg_dict.items()):
        # Read the data
        df = pd.read_csv(path)

        # Check if the required columns exist in the dataframe
        if 'wavelength' not in df.columns or 'reflectance' not in df.columns:
            print(f"Missing columns in {path}. Skipping.")
            continue

        # Plot the reflectance vs wavelength
        plt.plot(df['wavelength'], df['reflectance'], label=vegetable)

    # Add plot details
    plt.title(f"Reflectance Comparison ‚Äì {location.capitalize()}")
    plt.xlabel("Wavelength (nm)")
    plt.ylabel("Reflectance")
    plt.legend(title="Vegetable")
    plt.grid()
    plt.tight_layout()
    plt.show()

#@title Full Comparison of Crop Reflectance Across Different Locations
import matplotlib.pyplot as plt
import matplotlib.cm as cm
import pandas as pd
import os

# Create the figure
plt.figure(figsize=(16, 8))

# Ensure the number of colors equals or exceeds the number of files
num_files = len(csv_list)

# Use a high-quality colormap for categorical data
cmap = cm.get_cmap('tab20', num_files)  # 'tab20' supports up to 20 unique colors

# Alternatively, define a custom list of colors for better control
custom_colors = [
    "#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd",
    "#8c564b", "#e377c2", "#7f7f7f", "#bcbd22", "#17becf",
    "#aec7e8", "#ffbb78", "#98df8a", "#ff9896", "#c5b0d5",
    "#c49c94", "#f7b6d2", "#c7c7c7", "#dbdb8d", "#9edae5"
]

# If there are more files than colors in the custom list, fall back to the colormap
colors = custom_colors if num_files <= len(custom_colors) else [cmap(i % cmap.N) for i in range(num_files)]

for idx, file in enumerate(csv_list):
    df = pd.read_csv(file)
    base_name = os.path.basename(file).replace(".csv", "")

    # Modify the base_name to remove "spectral_signature_" and retain only "vegetable_location"
    base_name = base_name.replace("spectral_signature_", "")  # Remove the prefix

    color = colors[idx]  # Use the custom color or colormap color

    plt.plot(df['wavelength'], df['reflectance'], label=base_name, color=color)  # Plot with updated name

# Labels and Title
plt.title("Wavelength vs. Reflectance for Various Crops Across Locations", fontsize=16)
plt.xlabel("Wavelength (nm)", fontsize=14)
plt.ylabel("Reflectance", fontsize=14)
plt.legend(title="Vegetable & Location", bbox_to_anchor=(1.05, 1), loc='upper left', fontsize=12)
plt.grid(True, linestyle='--', alpha=0.6)
plt.legend(title="Vegetable & Location")
plt.show()